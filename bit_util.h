/*
* bit_util.h
*
* Copyright 2014 Ryan Koehler, VerdAscend Sciences, ryan@verdascend.com
*
* The programs and source code of the vertools collection are free software.
* They are distributed in the hope that they will be useful,
* WITHOUT ANY WARRANTY OF FITNESS FOR ANY PARTICULAR PURPOSE.  
* 
* Permission is granted for research, educational, and commercial use and 
* modification as long as 1) Code and any derived works are not redistributed
* for any fee, and 2) Proper credit is given to the authors. If you wish to 
* include this software in a product, please contact the authors.
*
*/

#define VERSION_S 	"Bit_Util version 0.11"

#define BIT_UTIL_ID  	5011
typedef struct BIT_UTIL
{
	int ID;
	char inname[NSIZE];		/* Input filename */
	int iform;				/* Input file format */
    int istrict;            /* Input strict error or warning */
	FILE *out;				/* Output file */
	char outname[NSIZE];	/* Output filename */
    int oform;              /* Output format */
    struct BITPOOL *bits;   /* Bit pool */
    int bsize;              /* Bit size (n bits) */
    int num;                /* Number of members in bit pool */
    char *mmask;            /* Member mask */
    char *bmask;            /* Bit mask */
	char sbname[NSIZE];		/* Second bit set filename */
    struct BITPOOL *sbits;  /* Second bit pool */
	int firstr,lastr;		/* First / last record */
    int outbits;            /* Outputing bits? */
    int outcomp;            /* Outputing comparison results */
	int do_stat;			/* Flag to report global stats */
	int do_ostat;			/* Flag to output stats per rec */
	int do_band;			/* Flag for logical AND */
	int do_bor;				/* Flag for logical OR */
	int do_bxor;			/* Flag for logical XOR */
	int do_bnot;			/* Flag for logical NOT */
	int do_b3;			    /* Flag for all 3 logical outputs */
	int do_dump;			/* Flag to dump */
	int do_fmat;			/* Report full pairwise matrix */
	int do_rap;			    /* Flag to report all pairs */
    struct BITPOOL *pretwk; /* Pre-tweak bit pool */
	int tw_num;			    /* Tweak this number of bits */
    DOUB tw_frac;           /* Tweak this fraction of bits */
    int seed;               /* Random seed */
}BIT_UTIL;

#define CHECK_BIT_UTIL(bu)	if(bu){DestroyBit_utilI(bu); bu=NULL;}


/*********************** ppp ********************
* C function listing generated by gen_prot
* Sun Apr 20 11:33:56 2014
*/
/****************************************************************
* bit_util.c
*/
int main(int argc, char **argv);
void Bit_utilUse(void);
int Bit_utilI(int argc, char **argv);
BIT_UTIL *CreateBit_utilPO(void);
int DestroyBit_utilI(BIT_UTIL *buPO);
void InitBit_util(BIT_UTIL *buPO);
int CheckBtuOptionsI(BIT_UTIL *buPO);
int SetupBtuI(BIT_UTIL *buPO);
int SetupTweaksI(BIT_UTIL *buPO);
int OpenBtuFilesI(BIT_UTIL *buPO);
int LoadBtuBitpoolsI(BIT_UTIL *buPO);
int LoadOneNamedBitpoolI(char *nameS, int iform, int error, BITPOOL **bpPPO);
int SetUpBtuAuxDataI(BIT_UTIL *buPO);
int HandleBtuModsI(BIT_UTIL *buPO) ;
int HandleBtuTweaksI(BIT_UTIL *buPO);
int HandleBtuFiltersI(BIT_UTIL *buPO) ;
int IsBitpoolRecOkI(BIT_UTIL *buPO, BITPOOL *bpPO, int r);
void HandleBtuHeader(BIT_UTIL *buPO, FILE *outPF);
void HandleBtuOutput(BIT_UTIL *buPO, FILE *outPF);
void HandleBtuOutTable(BIT_UTIL *buPO, FILE *outPF);
void HandleBtuFmat(BIT_UTIL *buPO, FILE *outPF);
void WriteBtuFmatHeader(BIT_UTIL *buPO, FILE *outPF);
int BitpoolFromTableI(TABLE *tabPO, BITPOOL **bpPPO);
int TableFromBitpoolI(BITPOOL *bpPO, char *maskPC, TABLE **tabPPO);

