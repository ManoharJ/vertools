/*
* numlist.h
*
* Copyright 2015 Ryan Koehler, VerdAscend Sciences, ryan@verdascend.com
*
* The programs and source code of the vertools collection are free software.
* They are distributed in the hope that they will be useful,
* WITHOUT ANY WARRANTY OF FITNESS FOR ANY PARTICULAR PURPOSE.  
* 
* Permission is granted for research, educational, and commercial use and 
* modification as long as 1) Code and any derived works are not redistributed
* for any fee, and 2) Proper credit is given to the authors. If you wish to 
* include this software in a product, please contact the authors.
*
*/


#ifndef __NUMLISTH__
#define __NUMLISTH__

#define NUMLIST_ID     6025

typedef struct NUMLIST
{
    int ID;
    char name[NSIZE+1];     /* ame */
    char fname[NSIZE+1];    /* nput file name */
    int type;               /* ype code */
    int *ivals;             /* llocated space for ints */
    DOUB *dvals;            /* llocated space for doubles */
    int n_vals;             /* mount of allocated space */
    int n;                  /* umber */
} NUMLIST;

#define CHECK_NUMLIST(fp)   if(fp){DestroyNumlistI(fp);fp=NULL;}

/*********************** ppp ********************
* C function listing generated by gen_prot
* Thu May  8 16:00:44 2014
*/
/****************************************************************
* numlist.c
*/
NUMLIST *CreateNumlistPO(int type, char *fnameS, int n);
int DestroyNumlistI(NUMLIST *nlPO);
void InitNumlist(NUMLIST *nlPO, int type);
int NumlistTypeOkI(NUMLIST *nlPO);
int SetNumlistLengthI(NUMLIST *nlPO, int len);
int HandleNumlistSpaceI(NUMLIST *nlPO, int i);
NUMLIST *DuplicateNumlistPO(NUMLIST *nlPO, int ntype);
void DumpNumlist(NUMLIST *nlPO, int st, int en, FILE *outPF);
int GetNumlistTypeI(NUMLIST *nlPO);
int GetNumlistLengthI(NUMLIST *nlPO);
int AppendNumlistIntI(NUMLIST *nlPO, int v);
int AppendNumlistDoubI(NUMLIST *nlPO, DOUB vD);
int NumlistGoodStartEndI(NUMLIST *nlPO, int st, int *stPI, int en, int *enPI);
int SetNumlistRangeIntsI(NUMLIST *nlPO, int st, int en, int v);
int SetNumlistRangeDoubsI(NUMLIST *nlPO, int st, int en, DOUB vD);
int AddNumlistIntI(NUMLIST *nlPO, int i, int v);
int AddNumlistDoubI(NUMLIST *nlPO, int i, DOUB vD);
int SetNumlistIntI(NUMLIST *nlPO, int i, int v);
int SetNumlistDoubI(NUMLIST *nlPO, int i, DOUB vD);
int GetNumlistIntI(NUMLIST *nlPO, int i, int *vPI);
int GetNumlistDoubI(NUMLIST *nlPO, int i, DOUB *vPD);
int GetNumlistIntDoubI(NUMLIST *nlPO, int i, int *vPI, DOUB *vPD);
int GetNumlistPtrIntsI(NUMLIST *nlPO, int **vPPI, int *nPI);
int GetNumlistPtrDoubsI(NUMLIST *nlPO, DOUB **vPPD, int *nPI);
int SetNumlistNamesI(NUMLIST *nlPO, char *nameS, char *fnameS, int max);
int GetNumlistNamesI(NUMLIST *nlPO, char *nameS, char *fnameS, int max);
int NumlistAutoFormatStringI(NUMLIST *nlPO, int *pPI, int *wPI, char *formS);
int NumlistSameTypeI(NUMLIST *flPO, NUMLIST *slPO);
int NumlistSameLenI(NUMLIST *flPO, NUMLIST *slPO);
int NumlistAreSameI(NUMLIST *flPO, NUMLIST *slPO);
int SortNumlistI(NUMLIST *nlPO, int dir);
int SmoothNumlistI(NUMLIST *flPO, NUMLIST *slPO, int win);
int NumlistLoadFromFileI(NUMLIST *nlPO, int type, char *fnameS, int col);
int NumlistSumI(NUMLIST *nlPO, int st, int en, DOUB *sumPD);
int NumlistStatsI(NUMLIST *nlPO, int st, int en, DOUB *loD, DOUB *hiD,
    DOUB *avD, DOUB *sdD);


#endif
